/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "echo_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace echo {

int _kErrorCodeValues[] = {
  ErrorCode::EMPTY_MSG,
  ErrorCode::OTHER_ERROR
};
const char* _kErrorCodeNames[] = {
  "EMPTY_MSG",
  "OTHER_ERROR"
};
const std::map<int, const char*> _ErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kErrorCodeValues, _kErrorCodeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));


EchoMsg::~EchoMsg() throw() {
}


void EchoMsg::__set_id(const int64_t val) {
  this->id = val;
}

void EchoMsg::__set_msg(const std::string& val) {
  this->msg = val;
}

uint32_t EchoMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EchoMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EchoMsg");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EchoMsg &a, EchoMsg &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

EchoMsg::EchoMsg(const EchoMsg& other0) {
  id = other0.id;
  msg = other0.msg;
  __isset = other0.__isset;
}
EchoMsg& EchoMsg::operator=(const EchoMsg& other1) {
  id = other1.id;
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void EchoMsg::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EchoMsg(";
  out << "id=" << to_string(id);
  out << ", " << "msg=" << to_string(msg);
  out << ")";
}


EchoException::~EchoException() throw() {
}


void EchoException::__set_id(const int32_t val) {
  this->id = val;
}

void EchoException::__set_msg(const std::string& val) {
  this->msg = val;
}

uint32_t EchoException::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t EchoException::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("EchoException");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(EchoException &a, EchoException &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

EchoException::EchoException(const EchoException& other2) : TException() {
  id = other2.id;
  msg = other2.msg;
  __isset = other2.__isset;
}
EchoException& EchoException::operator=(const EchoException& other3) {
  id = other3.id;
  msg = other3.msg;
  __isset = other3.__isset;
  return *this;
}
void EchoException::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "EchoException(";
  out << "id=" << to_string(id);
  out << ", " << "msg=" << to_string(msg);
  out << ")";
}

const char* EchoException::what() const throw() {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: EchoException";
  }
}

} // namespace
